<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Drawing Studio</title>
    <style>
        :root {
            --primary-color: #2196F3;
            --secondary-color: #1976D2;
            --background-color: #f5f5f5;
            --text-color: #333;
            --border-radius: 8px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            background: var(--background-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: var(--text-color);
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
        }

        .app-container {
            display: flex;
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
            width: 100%;
        }

        .toolbar {
            background: white;
            padding: 15px;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            gap: 15px;
            width: 250px;
        }

        .canvas-container {
            flex-grow: 1;
            position: relative;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .tool-section {
            border-bottom: 1px solid #eee;
            padding-bottom: 15px;
        }

        .tool-section:last-child {
            border-bottom: none;
        }

        .tool-section h3 {
            margin-bottom: 10px;
            font-size: 16px;
            color: var(--text-color);
        }

        .button-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 8px;
        }

        button {
            padding: 8px 12px;
            font-size: 14px;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }

        button:hover {
            background: var(--secondary-color);
            transform: translateY(-1px);
        }

        button:active {
            transform: translateY(0);
        }

        button.active {
            background: var(--secondary-color);
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }

        button i {
            font-size: 16px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .control-row {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        label {
            font-size: 14px;
            min-width: 60px;
        }

        input[type="color"] {
            width: 40px;
            height: 40px;
            padding: 0;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        input[type="range"] {
            flex-grow: 1;
            height: 6px;
            -webkit-appearance: none;
            background: #ddd;
            border-radius: 3px;
            outline: none;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 16px;
            height: 16px;
            background: var(--primary-color);
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.1);
        }

        .canvas-controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255,255,255,0.9);
            padding: 10px;
            border-radius: var(--border-radius);
            display: flex;
            gap: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .status-bar {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(255,255,255,0.9);
            padding: 5px 10px;
            border-radius: var(--border-radius);
            font-size: 12px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            padding: 20px;
            border-radius: var(--border-radius);
            max-width: 500px;
            width: 90%;
        }

        @media (max-width: 768px) {
            .app-container {
                flex-direction: column;
            }

            .toolbar {
                width: 100%;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <div class="header">
        <h1>Professional Drawing Studio</h1>
    </div>

    <div class="app-container">
        <div class="toolbar">
            <div class="tool-section">
                <h3>Drawing Tools</h3>
                <div class="button-grid">
                    <button id="pencilTool" class="active">
                        <i class="fas fa-pencil-alt"></i> Pencil
                    </button>
                    <button id="brushTool">
                        <i class="fas fa-paint-brush"></i> Brush
                    </button>
                    <button id="eraserTool">
                        <i class="fas fa-eraser"></i> Eraser
                    </button>
                    <button id="shapeTool">
                        <i class="fas fa-shapes"></i> Shapes
                    </button>
                </div>
            </div>

            <div class="tool-section">
                <h3>Colors</h3>
                <div class="control-group">
                    <div class="control-row">
                        <label>Color</label>
                        <input type="color" id="colorPicker" value="#000000">
                    </div>
                    <div class="control-row">
                        <label>Width</label>
                        <input type="range" id="lineWidth" min="1" max="50" value="2">
                    </div>
                    <div class="control-row">
                        <label>Opacity</label>
                        <input type="range" id="opacity" min="0" max="100" value="100">
                    </div>
                </div>
            </div>

            <div class="tool-section">
                <h3>Effects</h3>
                <div class="button-grid">
                    <button id="smoothButton">
                        <i class="fas fa-magic"></i> Smooth
                    </button>
                    <button id="blurButton">
                        <i class="fas fa-tint"></i> Blur
                    </button>
                    <button id="glowButton">
                        <i class="fas fa-sun"></i> Glow
                    </button>
                    <button id="textureButton">
                        <i class="fas fa-chess-board"></i> Texture
                    </button>
                </div>
            </div>

            <div class="tool-section">
                <h3>Actions</h3>
                <div class="button-grid">
                    <button id="undoButton">
                        <i class="fas fa-undo"></i> Undo
                    </button>
                    <button id="redoButton">
                        <i class="fas fa-redo"></i> Redo
                    </button>
                    <button id="clearButton">
                        <i class="fas fa-trash"></i> Clear
                    </button>
                    <button id="saveButton">
                        <i class="fas fa-save"></i> Save
                    </button>
                </div>
            </div>
        </div>

        <div class="canvas-container">
            <canvas id="drawingCanvas"></canvas>
            <div class="status-bar">
                <span id="coordinates"></span>
            </div>
            <div class="canvas-controls">
                <button id="zoomIn">
                    <i class="fas fa-search-plus"></i>
                </button>
                <button id="zoomOut">
                    <i class="fas fa-search-minus"></i>
                </button>
                <button id="resetZoom">
                    <i class="fas fa-compress-arrows-alt"></i>
                </button>
            </div>
        </div>
    </div>

    <div id="shapeModal" class="modal">
        <div class="modal-content">
            <h2>Select Shape</h2>
            <div class="button-grid">
                <button data-shape="rectangle">Rectangle</button>
                <button data-shape="circle">Circle</button>
                <button data-shape="triangle">Triangle</button>
                <button data-shape="line">Line</button>
            </div>
        </div>
    </div>

    <script>
        class DrawingApp {
            constructor() {
                this.initializeCanvas();
                this.initializeTools();
                this.setupEventListeners();
                this.initializeState();
            }

            initializeCanvas() {
                this.canvas = document.getElementById('drawingCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.resizeCanvas();
                window.addEventListener('resize', () => this.resizeCanvas());
            }

            resizeCanvas() {
                const container = this.canvas.parentElement;
                this.canvas.width = container.clientWidth;
                this.canvas.height = container.clientHeight;
                this.ctx.lineCap = 'round';
                this.ctx.lineJoin = 'round';
            }

            initializeTools() {
                this.currentTool = 'pencil';
                this.tools = {
                    pencil: { size: 2, opacity: 1 },
                    brush: { size: 10, opacity: 0.7 },
                    eraser: { size: 20, opacity: 1 }
                };
                this.color = '#000000';
                this.isDrawing = false;
                this.zoom = 1;
            }

            initializeState() {
                this.history = [];
                this.redoStack = [];
                this.saveState();
            }

            setupEventListeners() {
                // Drawing events
                this.canvas.addEventListener('mousedown', this.startDrawing.bind(this));
                this.canvas.addEventListener('mousemove', this.draw.bind(this));
                this.canvas.addEventListener('mouseup', this.stopDrawing.bind(this));
                this.canvas.addEventListener('mouseout', this.stopDrawing.bind(this));

                // Tool selection
                document.querySelectorAll('.toolbar button').forEach(button => {
                    button.addEventListener('click', () => this.selectTool(button.id));
                });

                // Color and size controls
                document.getElementById('colorPicker').addEventListener('input', (e) => {
                    this.color = e.target.value;
                });

                document.getElementById('lineWidth').addEventListener('input', (e) => {
                    this.tools[this.currentTool].size = parseInt(e.target.value);
                });

                document.getElementById('opacity').addEventListener('input', (e) => {
                    this.tools[this.currentTool].opacity = e.target.value / 100;
                });

                // Action buttons
                document.getElementById('undoButton').addEventListener('click', () => this.undo());
                document.getElementById('redoButton').addEventListener('click', () => this.redo());
                document.getElementById('clearButton').addEventListener('click', () => this.clear());
                document.getElementById('saveButton').addEventListener('click', () => this.save());

                // Zoom controls
                document.getElementById('zoomIn').addEventListener('click', () => this.zoomIn());
                document.getElementById('zoomOut').addEventListener('click', () => this.zoomOut());
                document.getElementById('resetZoom').addEventListener('click', () => this.resetZoom());

                // Mouse coordinates
                this.canvas.addEventListener('mousemove', (e) => this.updateCoordinates(e));
            }

            startDrawing(e) {
                this.isDrawing = true;
                const pos = this.getMousePos(e);
                this.ctx.beginPath();
                this.ctx.moveTo(pos.x, pos.y);
                this.setContextStyle();
            }

            draw(e) {
                if (!this.isDrawing) return;
                const pos = this.getMousePos(e);
                
                switch(this.currentTool) {
                    case 'pencil':
                        this.drawPencil(pos);
                        break;
                    case 'brush':
                        this.drawBrush(pos);
                        break;
                    case 'eraser':
                        this.erase(pos);
                        break;
                }
            }

            stopDrawing() {
                if (this.isDrawing) {
                    this.isDrawing = false;
                    this.saveState();
                }
            }

            drawPencil(pos) {
                this.ctx.lineTo(pos.x, pos.y);
                this.ctx.stroke();
            }

            drawBrush(pos) {
                const radius = this.tools.brush.size / 2;
                const gradient = this.ctx.createRadialGradient(
                    pos.x, pos.y, 0,
                    pos.x, pos.y, radius
                );
                gradient.addColorStop(0, this.color);
                gradient.addColorStop(1, 'rgba(0,0,0,0)');
                this.ctx.fillStyle = gradient;
                this.ctx.fillRect(pos.x - radius, pos.y - radius, radius * 2, radius * 2);
            }

            erase(pos) {
                this.ctx.save();
                this.ctx.globalCompositeOperation = 'destination-out';
                this.ctx.beginPath();
                this.ctx.arc(pos.x, pos.y, this.tools.eraser.size / 2, 0, Math.PI * 2);
                this.ctx.fill();
                this.ctx.restore();
            }

            setContextStyle() {
                this.ctx.strokeStyle = this.color;
                this.ctx.lineWidth = this.tools[this.currentTool].size;
                this.ctx.globalAlpha = this.tools[this.currentTool].opacity;
            }

            getMousePos(e) {
                const rect = this.canvas.getBoundingClientRect();
                return {
                    x: (e.clientX - rect.left) / this.zoom,
                    y: (e.clientY - rect.top) / this.zoom
                };
            }

            selectTool(toolId) {
                document.querySelectorAll('.toolbar button').forEach(button => {
                    button.classList.remove('active');
                });
                document.getElementById(toolId).classList.add('active');
                this.currentTool = toolId.replace('Tool', '');
            }

            saveState() {
                this.history.push(this.canvas.toDataURL());
                this.redoStack = [];
                this.updateUndoRedoButtons();
            }

            undo() {
                if (this.history.length > 1) {
                    this.redoStack.push(this.history.pop());
                    this.loadState(this.history[this.history.length - 1]);
                    this.updateUndoRedoButtons();
                }
            }

            redo() {
                if (this.redoStack.length > 0) {
                    const state = this.redoStack.pop();
                    this.history.push(state);
                    this.loadState(state);
                    this.updateUndoRedoButtons();
                }
            }

            loadState(state) {
                const img = new Image();
                img.src = state;
                img.onload = () => {
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    this.ctx.drawImage(img, 0, 0);
                };
            }

            updateUndoRedoButtons() {
                document.getElementById('undoButton').disabled = this.history.length <= 1;
                document.getElementById('redoButton').disabled = this.redoStack.length === 0;
            }

            clear() {
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                this.saveState();
            }

            save() {
                const link = document.createElement('a');
                link.download = 'drawing.png';
                link.href = this.canvas.toDataURL();
                link.click();
            }

            zoomIn() {
                this.zoom = Math.min(this.zoom * 1.2, 5);
                this.applyZoom();
            }

            zoomOut() {
                this.zoom = Math.max(this.zoom / 1.2, 0.2);
                this.applyZoom();
            }

            resetZoom() {
                this.zoom = 1;
                this.applyZoom();
            }

            applyZoom() {
                this.canvas.style.transform = `scale(${this.zoom})`;
                this.canvas.style.transformOrigin = 'center center';
            }

            updateCoordinates(e) {
                const pos = this.getMousePos(e);
                document.getElementById('coordinates').textContent = 
                    `X: ${Math.round(pos.x)}, Y: ${Math.round(pos.y)}`;
            }
        }

        // Initialize the drawing app
        const drawingApp = new DrawingApp();
    </script>
</body>
</html>
